@use 'sass:map';
@use '../../../../scss/theming';
@use '../../../../scss/core';

@mixin daff-stroked-button-theme-variant($base-color, $active-color) {
	border: 1px solid $base-color;
	color: $base-color;
	background-color: transparent;

	&::after {
		background-color: $base-color;
	}

	&:hover {
		color: theming.daff-text-contrast($base-color);
	}

	&:active {
		border: 1px solid $active-color;
		color: theming.daff-text-contrast($active-color);

		&::after {
			background-color: $active-color;
		}
	}
}

@mixin daff-stroked-button-theme($theme) {
	$primary: core.daff-map-get($theme, primary);
	$secondary: core.daff-map-get($theme, secondary);
	$tertiary: core.daff-map-get($theme, tertiary);
	$info: core.daff-map-get($theme, informational);
	$warn: core.daff-map-get($theme, warn);
	$critical: core.daff-map-get($theme, critical);
	$success: core.daff-map-get($theme, success);
	$base: core.daff-map-get($theme, 'core', 'base');
	$base-contrast: core.daff-map-get($theme, 'core', 'base-contrast');
	$white: core.daff-map-get($theme, 'core', 'white');
	$black: core.daff-map-get($theme, 'core', 'black');
	$neutral: core.daff-map-get($theme, 'core', 'neutral');

	.daff-stroked-button {
		background: transparent;
		border: 1px solid theming.daff-illuminate($base, $neutral, 5);
		color: currentColor;

		&::after {
			background: theming.daff-illuminate($base, $neutral, 2);
		}

		&:hover {
			border: 1px solid theming.daff-illuminate($base, $neutral, 2);
			color: theming.daff-text-contrast(
				theming.daff-illuminate($base, $neutral, 2)
			);
		}

		&:active {
			border: 1px solid theming.daff-illuminate($base, $neutral, 3);
			color: theming.daff-text-contrast(
				theming.daff-illuminate($base, $neutral, 3)
			);

			&::after {
				background: theming.daff-illuminate($base, $neutral, 3);
			}
		}

		&.daff-primary {
			@include daff-stroked-button-theme-variant(
				theming.daff-color($primary),
				theming.daff-color($primary, 70)
			);
		}

		&.daff-secondary {
			@include daff-stroked-button-theme-variant(
				theming.daff-color($secondary),
				theming.daff-color($secondary, 70)
			);
		}

		&.daff-tertiary {
			@include daff-stroked-button-theme-variant(
				theming.daff-color($tertiary),
				theming.daff-color($tertiary, 70)
			);
		}

		&.daff-black {
			@include daff-stroked-button-theme-variant(
				$black,
				theming.daff-color($neutral, 100)
			);
		}

		&.daff-white {
			@include daff-stroked-button-theme-variant(
				$white,
				theming.daff-color($neutral, 20)
			);
		}

		&.daff-theme {
			@include daff-stroked-button-theme-variant(
				$base,
				theming.daff-illuminate($base, $neutral, 2)
			);
		}

		&.daff-theme-contrast {
			@include daff-stroked-button-theme-variant(
				$base-contrast,
				theming.daff-illuminate($base-contrast, $neutral, 2)
			);
		}

		&[disabled],
		&.disabled {
			background-color: transparent;
			border-color: theming.daff-illuminate($base, $neutral, 3);
			color: theming.daff-illuminate($base, $neutral, 5);

			&:hover {
				color: theming.daff-illuminate($base, $neutral, 5);

				&::after {
					background-color: transparent;
					opacity: 0;
				}
			}
		}

		&.daff-warn {
			@include daff-stroked-button-theme-variant(
				theming.daff-color($warn),
				theming.daff-color($warn, 70)
			);
		}

		&.daff-critical {
			@include daff-stroked-button-theme-variant(
				theming.daff-color($critical),
				theming.daff-color($critical, 70)
			);
		}

		&.daff-success {
			@include daff-stroked-button-theme-variant(
				theming.daff-color($success),
				theming.daff-color($success, 70)
			);
		}
	}
}
